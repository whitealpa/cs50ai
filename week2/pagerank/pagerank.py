import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """

    current_page = page
    number_of_pages_in_current_page = len(corpus[current_page])
    number_of_pages_in_corpus = len(corpus)
    
    equally_distributed = 1 / number_of_pages_in_corpus
    probability_of_page_in_current_page = damping_factor / number_of_pages_in_current_page
    probability_of_any_page = (1 - damping_factor) / number_of_pages_in_corpus
    probability_distribution = dict()
    
    if number_of_pages_in_current_page == 0:
        for each_page in corpus:
            probability_distribution[each_page] = equally_distributed      
    
    elif number_of_pages_in_current_page > 0:
        for each_page in corpus:
            if each_page in corpus[current_page]:
                probability_distribution[each_page] = probability_of_any_page + probability_of_page_in_current_page
            else:
                probability_distribution[each_page] = probability_of_any_page
             
    # For debug     
    print("Current page:", current_page)
    print("pr for each page in current page:", probability_of_page_in_current_page) 
    print("pr of any page:", probability_of_any_page)
    print("pr distribution", probability_distribution)

    return probability_distribution


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    
    print(corpus)
    print()
    start_page = random.choice(list(corpus))
    first_sample = transition_model(corpus, start_page, damping_factor)
    
    # loop or generate all the sample
    
    # the remaning samples are generated by transition model
    
    # return key {"page", probability (with the sum total of 1)}


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    raise NotImplementedError


if __name__ == "__main__":
    main()
